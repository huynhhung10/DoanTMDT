
@page "/ProductList"
@page "/ProductList/admin/search/{searchText}/{page:int}"
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<h3>Products</h3>

@if (ProductService.AdminProducts == null)
{
    <span>Loading Products...</span>
}
else
{
    <button class="btn btn-primary float-end" @onclick="CreateProduct">
        <i class="oi oi-plus"></i> Add new product
    </button>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Product</th>
                <th>Variant</th>
                <th>Price</th>
                <th>Visible</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <Virtualize Items="ProductService.AdminProducts" Context="product">
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                    {
                        <img src="@product.ImageUrl" />
                    }
                   
                </td>
                <td>@product.Title</td>
                <td>
                    @foreach (var variant in product.Variants)
                    {
                        <span>@variant.Edition.Name</span>

                        <br />
                    }
                </td>
                <td>
                    @foreach (var variant in product.Variants)
                    {
                        <span>@variant.Price</span>

                        <br />
                    }
                </td>
                <td>@(product.Visible ? "✔️" : "")</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => EditProduct(product.Id))">
                        <i class="oi oi-pencil"></i>
                    </button>
                </td>
            </tr>
        </Virtualize>
    </tbody>
</table>

    for (var i = 1; i<= ProductService.PageCount; i++)
    {
        <a class="btn page-item @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info")" href="/ProductList/admin/search/@ProductService.LastAdminSearchText/@i">@i</a>
    }
}

@code {
    [Parameter]
    public string? searchText { get; set; } = null;

    [Parameter]
    public int page { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        await ProductService.GetAdminProducts();
    }

    void EditProduct(int productId)
    {
        NavigationManager.NavigateTo($"admin/product/{productId}");
    }

    void CreateProduct()
    {
        NavigationManager.NavigateTo("admin/product");
    }
    
  
    protected override async Task OnParametersSetAsync()
    {
       if (searchText != null)
        {
            await ProductService.SearchAdminProducts(searchText, page);
        }
    }
}
